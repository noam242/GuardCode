
#include "pch.hpp"
#include "strmaps.hpp"

#include <sddl.h>

#define STATUS_SUCCESS ((NTSTATUS)0x00000000L) 
#define STATUS_UNSUCCESSFUL ((NTSTATUS)0xC0000001L)
#define STATUS_INVALID_EA_FLAG ((NTSTATUS)0x80000015L)
#define STATUS_BUFFER_OVERFLOW ((NTSTATUS)0x80000005L)
#define STATUS_NO_MORE_FILES ((NTSTATUS)0x80000006L)
#define STATUS_FLT_DISALLOW_FAST_IO ((NTSTATUS)0xC01C0004L)
#define STATUS_FILE_LOCKED_WITH_ONLY_READERS ((NTSTATUS)0x0000012AL)
#define STATUS_REPARSE ((NTSTATUS)0x00000104L)
#define STATUS_MORE_ENTRIES ((NTSTATUS)0x00000105L)
#define STATUS_OPLOCK_BREAK_IN_PROGRESS ((NTSTATUS)0x00000108L)
#define STATUS_NOTIFY_CLEANUP ((NTSTATUS)0x0000010BL)
#define STATUS_NOTIFY_ENUM_DIR ((NTSTATUS)0x0000010CL)
#define STATUS_FILE_LOCKED_WITH_WRITERS ((NTSTATUS)0x0000012BL)
#define STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE ((NTSTATUS)0x00000215L)
#define STATUS_OPLOCK_HANDLE_CLOSED ((NTSTATUS)0x00000216L)
#define STATUS_WAIT_FOR_OPLOCK ((NTSTATUS)0x00000367L)
#define STATUS_PREDEFINED_HANDLE ((NTSTATUS)0x40000016L)
#define STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION ((NTSTATUS)0xC0190049L)
#define STATUS_CANNOT_BREAK_OPLOCK ((NTSTATUS)0xC0000909L)
#define STATUS_HIVE_UNLOADED ((NTSTATUS)0xC0000425L)
#define STATUS_FILE_SYSTEM_LIMITATION ((NTSTATUS)0xC0000427L)
#define STATUS_DEVICE_FEATURE_NOT_SUPPORTED ((NTSTATUS)0xC0000463L)
#define STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED ((NTSTATUS)0xC000A2A1L)
#define STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED ((NTSTATUS)0xC000A2A2L)
#define STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED ((NTSTATUS)0xC000A2A3L)
#define STATUS_TRANSACTIONAL_CONFLICT ((NTSTATUS)0xC0190001L)
#define STATUS_INVALID_TRANSACTION ((NTSTATUS)0xC0190002L)
#define STATUS_TRANSACTION_NOT_ACTIVE ((NTSTATUS)0xC0190003L)
#define STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION ((NTSTATUS)0xC019003EL)
#define STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE ((NTSTATUS)0xC0190040L)
#define STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION ((NTSTATUS)0xC0190044L)
#define STATUS_DOWNGRADE_DETECTED ((NTSTATUS)0xC0000388L)
#define STATUS_INSUFF_SERVER_RESOURCES ((NTSTATUS)0xC0000205L)
#define STATUS_INVALID_ADDRESS_COMPONENT ((NTSTATUS)0xC0000207L)
#define STATUS_CONNECTION_DISCONNECTED ((NTSTATUS)0xC000020CL)
#define STATUS_NOT_FOUND ((NTSTATUS)0xC0000225L)
#define STATUS_USER_MAPPED_FILE ((NTSTATUS)0xC0000243L)
#define STATUS_LOGIN_WKSTA_RESTRICTION ((NTSTATUS)0xC0000248L)
#define STATUS_PATH_NOT_COVERED ((NTSTATUS)0xC0000257L)
#define STATUS_DFS_UNAVAILABLE ((NTSTATUS)0xC000026DL)
#define STATUS_NO_MORE_MATCHES ((NTSTATUS)0xC0000273L)
#define STATUS_NOT_A_REPARSE_POINT ((NTSTATUS)0xC0000275L)
#define STATUS_CANNOT_MAKE ((NTSTATUS)0xC00002EAL)
#define STATUS_OBJECTID_NOT_FOUND ((NTSTATUS)0xC00002F0L)
#define STATUS_USER_SESSION_DELETED ((NTSTATUS)0xC0000203L)
#define STATUS_FILE_CORRUPT_ERROR ((NTSTATUS)0xC0000102L)
#define STATUS_NOT_A_DIRECTORY ((NTSTATUS)0xC0000103L)
#define STATUS_FILES_OPEN ((NTSTATUS)0xC0000107L)
#define STATUS_CANNOT_IMPERSONATE ((NTSTATUS)0xC000010DL)
#define STATUS_CANCELLED ((NTSTATUS)0xC0000120L)
#define STATUS_CANNOT_DELETE ((NTSTATUS)0xC0000121L)
#define STATUS_FILE_DELETED ((NTSTATUS)0xC0000123L)
#define STATUS_FILE_CLOSED ((NTSTATUS)0xC0000128L)
#define STATUS_THREAD_NOT_IN_PROCESS ((NTSTATUS)0xC000012AL)
#define STATUS_INVALID_LEVEL ((NTSTATUS)0xC0000148L)
#define STATUS_PIPE_BROKEN ((NTSTATUS)0xC000014BL)
#define STATUS_REGISTRY_CORRUPT ((NTSTATUS)0xC000014CL)
#define STATUS_REGISTRY_IO_FAILED ((NTSTATUS)0xC000014DL)
#define STATUS_KEY_DELETED ((NTSTATUS)0xC000017CL)
#define STATUS_CHILD_MUST_BE_VOLATILE ((NTSTATUS)0xC0000181L)
#define STATUS_INVALID_DEVICE_STATE ((NTSTATUS)0xC0000184L)
#define STATUS_IO_DEVICE_ERROR ((NTSTATUS)0xC0000185L)
#define STATUS_LOG_FILE_FULL ((NTSTATUS)0xC0000188L)
#define STATUS_FS_DRIVER_REQUIRED ((NTSTATUS)0xC000019CL)
#define STATUS_DIRECTORY_NOT_EMPTY ((NTSTATUS)0xC0000101L)
#define STATUS_NOT_IMPLEMENTED ((NTSTATUS)0xC0000002L)
#define STATUS_INVALID_INFO_CLASS ((NTSTATUS)0xC0000003L) 
#define STATUS_INFO_LENGTH_MISMATCH ((NTSTATUS)0xC0000004L)
#define STATUS_NO_SUCH_DEVICE ((NTSTATUS)0xC000000EL)
#define STATUS_NO_SUCH_FILE ((NTSTATUS)0xC000000FL)
#define STATUS_INVALID_DEVICE_REQUEST ((NTSTATUS)0xC0000010L)
#define STATUS_END_OF_FILE ((NTSTATUS)0xC0000011L)
#define STATUS_WRONG_VOLUME ((NTSTATUS)0xC0000012L)
#define STATUS_NO_MEDIA_IN_DEVICE ((NTSTATUS)0xC0000013L)
#define STATUS_NONEXISTENT_SECTOR ((NTSTATUS)0xC0000015L)
#define STATUS_ALREADY_COMMITTED ((NTSTATUS)0xC0000021L)
#define STATUS_ACCESS_DENIED ((NTSTATUS)0xC0000022L)
#define STATUS_BUFFER_TOO_SMALL ((NTSTATUS)0xC0000023L)
#define STATUS_OBJECT_TYPE_MISMATCH ((NTSTATUS)0xC0000024L)
#define STATUS_DISK_CORRUPT_ERROR ((NTSTATUS)0xC0000032L)
#define STATUS_OBJECT_NAME_INVALID ((NTSTATUS)0xC0000033L)
#define STATUS_OBJECT_NAME_NOT_FOUND ((NTSTATUS)0xC0000034L)
#define STATUS_OBJECT_NAME_COLLISION ((NTSTATUS)0xC0000035L)
#define STATUS_OBJECT_PATH_INVALID ((NTSTATUS)0xC0000039L)
#define STATUS_OBJECT_PATH_NOT_FOUND ((NTSTATUS)0xC000003AL)
#define STATUS_OBJECT_PATH_SYNTAX_BAD ((NTSTATUS)0xC000003BL)
#define STATUS_DATA_OVERRUN ((NTSTATUS)0xC000003CL)
#define STATUS_CRC_ERROR ((NTSTATUS)0xC000003FL)
#define STATUS_SHARING_VIOLATION ((NTSTATUS)0xC0000043L)
#define STATUS_QUOTA_EXCEEDED ((NTSTATUS)0xC0000044L)
#define STATUS_EAS_NOT_SUPPORTED ((NTSTATUS)0xC000004FL)
#define STATUS_EA_TOO_LARGE ((NTSTATUS)0xC0000050L)
#define STATUS_NONEXISTENT_EA_ENTRY ((NTSTATUS)0xC0000051L)
#define STATUS_NO_EAS_ON_FILE ((NTSTATUS)0xC0000052L)
#define STATUS_EA_CORRUPT_ERROR ((NTSTATUS)0xC0000053L)
#define STATUS_FILE_LOCK_CONFLICT ((NTSTATUS)0xC0000054L)
#define STATUS_LOCK_NOT_GRANTED ((NTSTATUS)0xC0000055L)
#define STATUS_DELETE_PENDING ((NTSTATUS)0xC0000056L)
#define STATUS_PRIVILEGE_NOT_HELD ((NTSTATUS)0xC0000061L)
#define STATUS_LOGON_FAILURE ((NTSTATUS)0xC000006DL) 
#define STATUS_RANGE_NOT_LOCKED ((NTSTATUS)0xC000007EL)
#define STATUS_DISK_FULL ((NTSTATUS)0xC000007FL)
#define STATUS_FILE_INVALID ((NTSTATUS)0xC0000098L)
#define STATUS_INSUFFICIENT_RESOURCES ((NTSTATUS)0xC000009AL) 
#define STATUS_DEVICE_DATA_ERROR ((NTSTATUS)0xC000009CL)
#define STATUS_DEVICE_NOT_CONNECTED ((NTSTATUS)0xC000009DL)
#define STATUS_MEDIA_WRITE_PROTECTED ((NTSTATUS)0xC00000A2L)
#define STATUS_BAD_IMPERSONATION_LEVEL ((NTSTATUS)0xC00000A5L)
#define STATUS_INSTANCE_NOT_AVAILABLE ((NTSTATUS)0xC00000ABL)
#define STATUS_PIPE_NOT_AVAILABLE ((NTSTATUS)0xC00000ACL)
#define STATUS_INVALID_PIPE_STATE ((NTSTATUS)0xC00000ADL)
#define STATUS_PIPE_BUSY ((NTSTATUS)0xC00000AEL)
#define STATUS_PIPE_DISCONNECTED ((NTSTATUS)0xC00000B0L)
#define STATUS_PIPE_CLOSING ((NTSTATUS)0xC00000B1L)
#define STATUS_PIPE_CONNECTED ((NTSTATUS)0xC00000B2L)
#define STATUS_PIPE_LISTENING ((NTSTATUS)0xC00000B3L)
#define STATUS_INVALID_READ_MODE ((NTSTATUS)0xC00000B4L)
#define STATUS_IO_TIMEOUT ((NTSTATUS)0xC00000B5L)
#define STATUS_FILE_IS_A_DIRECTORY ((NTSTATUS)0xC00000BAL)
#define STATUS_NOT_SUPPORTED ((NTSTATUS)0xC00000BBL)
#define STATUS_DUPLICATE_NAME ((NTSTATUS)0xC00000BDL)
#define STATUS_BAD_NETWORK_PATH ((NTSTATUS)0xC00000BEL)
#define STATUS_TOO_MANY_COMMANDS ((NTSTATUS)0xC00000C1L)
#define STATUS_INVALID_NETWORK_RESPONSE ((NTSTATUS)0xC00000C3L)
#define STATUS_UNEXPECTED_NETWORK_ERROR ((NTSTATUS)0xC00000C4L)
#define STATUS_BAD_NETWORK_NAME ((NTSTATUS)0xC00000CCL)
#define STATUS_NOT_SAME_DEVICE ((NTSTATUS)0xC00000D4L)
#define STATUS_CANT_WAIT ((NTSTATUS)0xC00000D8L)
#define STATUS_PIPE_EMPTY ((NTSTATUS)0xC00000D9L)
#define STATUS_CANT_TERMINATE_SELF ((NTSTATUS)0xC00000DBL)
#define STATUS_OPLOCK_NOT_GRANTED ((NTSTATUS)0xC00000E2L)
#define STATUS_INVALID_PARAMETER_1 ((NTSTATUS)0xC00000EFL)
#define STATUS_INVALID_PARAMETER_2 ((NTSTATUS)0xC00000F0L)
#define STATUS_INVALID_PARAMETER_3 ((NTSTATUS)0xC00000F1L)
#define STATUS_INVALID_PARAMETER_4 ((NTSTATUS)0xC00000F2L)
#define STATUS_REDIRECTOR_NOT_STARTED ((NTSTATUS)0xC00000FBL)

typedef struct _STATUS_DEF
{
	NTSTATUS Status;
	LPCTSTR lpszStatus;
}STATUS_DEF, *PSTATUS_DEF;

#define STATUS_DEF(_x) {(NTSTATUS)_x, TEXT(#_x)}

STATUS_DEF gStatus[] = {
	STATUS_DEF(STATUS_SUCCESS),
	STATUS_DEF(STATUS_UNSUCCESSFUL),
	STATUS_DEF(SEC_E_WRONG_PRINCIPAL),
	STATUS_DEF(STATUS_INVALID_EA_FLAG),
	STATUS_DEF(STATUS_DATATYPE_MISALIGNMENT),
	STATUS_DEF(STATUS_BUFFER_OVERFLOW),
	STATUS_DEF(STATUS_BUFFER_OVERFLOW),
	STATUS_DEF(STATUS_NO_MORE_FILES),
	STATUS_DEF(STATUS_PENDING),
	STATUS_DEF(STATUS_FLT_DISALLOW_FAST_IO),
	STATUS_DEF(STATUS_FILE_LOCKED_WITH_ONLY_READERS),
	STATUS_DEF(STATUS_REPARSE),
	STATUS_DEF(STATUS_MORE_ENTRIES),
	STATUS_DEF(STATUS_OPLOCK_BREAK_IN_PROGRESS),
	STATUS_DEF(STATUS_NOTIFY_CLEANUP),
	STATUS_DEF(STATUS_NOTIFY_ENUM_DIR),
	STATUS_DEF(STATUS_FILE_LOCKED_WITH_WRITERS),
	STATUS_DEF(STATUS_OPLOCK_SWITCHED_TO_NEW_HANDLE),
	STATUS_DEF(STATUS_OPLOCK_HANDLE_CLOSED),
	STATUS_DEF(STATUS_WAIT_FOR_OPLOCK),
	STATUS_DEF(STATUS_PREDEFINED_HANDLE),
	STATUS_DEF(STATUS_SPARSE_NOT_ALLOWED_IN_TRANSACTION),
	STATUS_DEF(STATUS_CANNOT_BREAK_OPLOCK),
	STATUS_DEF(STATUS_HIVE_UNLOADED),
	STATUS_DEF(STATUS_FILE_SYSTEM_LIMITATION),
	STATUS_DEF(STATUS_DEVICE_FEATURE_NOT_SUPPORTED),
	STATUS_DEF(STATUS_OFFLOAD_READ_FLT_NOT_SUPPORTED),
	STATUS_DEF(STATUS_OFFLOAD_WRITE_FLT_NOT_SUPPORTED),
	STATUS_DEF(STATUS_OFFLOAD_READ_FILE_NOT_SUPPORTED),
	STATUS_DEF(STATUS_TRANSACTIONAL_CONFLICT),
	STATUS_DEF(STATUS_INVALID_TRANSACTION),
	STATUS_DEF(STATUS_TRANSACTION_NOT_ACTIVE),
	STATUS_DEF(STATUS_EFS_NOT_ALLOWED_IN_TRANSACTION),
	STATUS_DEF(STATUS_TRANSACTED_MAPPING_UNSUPPORTED_REMOTE),
	STATUS_DEF(STATUS_CANNOT_EXECUTE_FILE_IN_TRANSACTION),
	STATUS_DEF(STATUS_DOWNGRADE_DETECTED),
	STATUS_DEF(STATUS_INSUFF_SERVER_RESOURCES),
	STATUS_DEF(STATUS_INVALID_ADDRESS_COMPONENT),
	STATUS_DEF(STATUS_CONNECTION_DISCONNECTED),
	STATUS_DEF(STATUS_NOT_FOUND),
	STATUS_DEF(STATUS_USER_MAPPED_FILE),
	STATUS_DEF(STATUS_LOGIN_WKSTA_RESTRICTION),
	STATUS_DEF(STATUS_PATH_NOT_COVERED),
	STATUS_DEF(STATUS_DFS_UNAVAILABLE),
	STATUS_DEF(STATUS_NO_MORE_MATCHES),
	STATUS_DEF(STATUS_NOT_A_REPARSE_POINT),
	STATUS_DEF(STATUS_CANNOT_MAKE),
	STATUS_DEF(STATUS_OBJECTID_NOT_FOUND),
	STATUS_DEF(STATUS_USER_SESSION_DELETED),
	STATUS_DEF(STATUS_FILE_CORRUPT_ERROR),
	STATUS_DEF(STATUS_NOT_A_DIRECTORY),
	STATUS_DEF(STATUS_FILES_OPEN),
	STATUS_DEF(STATUS_CANNOT_IMPERSONATE),
	STATUS_DEF(STATUS_CANCELLED),
	STATUS_DEF(STATUS_CANNOT_DELETE),
	STATUS_DEF(STATUS_FILE_DELETED),
	STATUS_DEF(STATUS_FILE_CLOSED),
	STATUS_DEF(STATUS_THREAD_NOT_IN_PROCESS),
	STATUS_DEF(STATUS_INVALID_LEVEL),
	STATUS_DEF(STATUS_PIPE_BROKEN),
	STATUS_DEF(STATUS_REGISTRY_CORRUPT),
	STATUS_DEF(STATUS_REGISTRY_IO_FAILED),
	STATUS_DEF(STATUS_KEY_DELETED),
	STATUS_DEF(STATUS_CHILD_MUST_BE_VOLATILE),
	STATUS_DEF(STATUS_INVALID_DEVICE_STATE),
	STATUS_DEF(STATUS_IO_DEVICE_ERROR),
	STATUS_DEF(STATUS_LOG_FILE_FULL),
	STATUS_DEF(STATUS_FS_DRIVER_REQUIRED),
	STATUS_DEF(STATUS_DIRECTORY_NOT_EMPTY),
	STATUS_DEF(STATUS_NOT_IMPLEMENTED),
	STATUS_DEF(STATUS_INVALID_INFO_CLASS),
	STATUS_DEF(STATUS_INFO_LENGTH_MISMATCH),
	STATUS_DEF(STATUS_ACCESS_VIOLATION),
	STATUS_DEF(STATUS_IN_PAGE_ERROR),
	STATUS_DEF(STATUS_INVALID_HANDLE),
	STATUS_DEF(STATUS_INVALID_PARAMETER),
	STATUS_DEF(STATUS_NO_SUCH_DEVICE),
	STATUS_DEF(STATUS_NO_SUCH_FILE),
	STATUS_DEF(STATUS_INVALID_DEVICE_REQUEST),
	STATUS_DEF(STATUS_END_OF_FILE),
	STATUS_DEF(STATUS_WRONG_VOLUME),
	STATUS_DEF(STATUS_NO_MEDIA_IN_DEVICE),
	STATUS_DEF(STATUS_NONEXISTENT_SECTOR),
	STATUS_DEF(STATUS_NO_MEMORY),
	STATUS_DEF(STATUS_ALREADY_COMMITTED),
	STATUS_DEF(STATUS_ACCESS_DENIED),
	STATUS_DEF(STATUS_BUFFER_TOO_SMALL),
	STATUS_DEF(STATUS_OBJECT_TYPE_MISMATCH),
	STATUS_DEF(STATUS_DISK_CORRUPT_ERROR),
	STATUS_DEF(STATUS_OBJECT_NAME_INVALID),
	STATUS_DEF(STATUS_OBJECT_NAME_NOT_FOUND),
	STATUS_DEF(STATUS_OBJECT_NAME_COLLISION),
	STATUS_DEF(STATUS_OBJECT_PATH_INVALID),
	STATUS_DEF(STATUS_OBJECT_PATH_NOT_FOUND),
	STATUS_DEF(STATUS_OBJECT_PATH_SYNTAX_BAD),
	STATUS_DEF(STATUS_DATA_OVERRUN),
	STATUS_DEF(STATUS_CRC_ERROR),
	STATUS_DEF(STATUS_SHARING_VIOLATION),
	STATUS_DEF(STATUS_QUOTA_EXCEEDED),
	STATUS_DEF(STATUS_EAS_NOT_SUPPORTED),
	STATUS_DEF(STATUS_EA_TOO_LARGE),
	STATUS_DEF(STATUS_NONEXISTENT_EA_ENTRY),
	STATUS_DEF(STATUS_NO_EAS_ON_FILE),
	STATUS_DEF(STATUS_EA_CORRUPT_ERROR),
	STATUS_DEF(STATUS_FILE_LOCK_CONFLICT),
	STATUS_DEF(STATUS_LOCK_NOT_GRANTED),
	STATUS_DEF(STATUS_DELETE_PENDING),
	STATUS_DEF(STATUS_PRIVILEGE_NOT_HELD),
	STATUS_DEF(STATUS_LOGON_FAILURE),
	STATUS_DEF(STATUS_RANGE_NOT_LOCKED),
	STATUS_DEF(STATUS_DISK_FULL),
	STATUS_DEF(STATUS_FILE_INVALID),
	STATUS_DEF(STATUS_INSUFFICIENT_RESOURCES),
	STATUS_DEF(STATUS_DEVICE_DATA_ERROR),
	STATUS_DEF(STATUS_DEVICE_NOT_CONNECTED),
	STATUS_DEF(STATUS_MEDIA_WRITE_PROTECTED),
	STATUS_DEF(STATUS_BAD_IMPERSONATION_LEVEL),
	STATUS_DEF(STATUS_INSTANCE_NOT_AVAILABLE),
	STATUS_DEF(STATUS_PIPE_NOT_AVAILABLE),
	STATUS_DEF(STATUS_INVALID_PIPE_STATE),
	STATUS_DEF(STATUS_PIPE_BUSY),
	STATUS_DEF(STATUS_PIPE_DISCONNECTED),
	STATUS_DEF(STATUS_PIPE_CLOSING),
	STATUS_DEF(STATUS_PIPE_CONNECTED),
	STATUS_DEF(STATUS_PIPE_LISTENING),
	STATUS_DEF(STATUS_INVALID_READ_MODE),
	STATUS_DEF(STATUS_IO_TIMEOUT),
	STATUS_DEF(STATUS_FILE_IS_A_DIRECTORY),
	STATUS_DEF(STATUS_NOT_SUPPORTED),
	STATUS_DEF(STATUS_DUPLICATE_NAME),
	STATUS_DEF(STATUS_BAD_NETWORK_PATH),
	STATUS_DEF(STATUS_TOO_MANY_COMMANDS),
	STATUS_DEF(STATUS_INVALID_NETWORK_RESPONSE),
	STATUS_DEF(STATUS_UNEXPECTED_NETWORK_ERROR),
	STATUS_DEF(STATUS_BAD_NETWORK_NAME),
	STATUS_DEF(STATUS_NOT_SAME_DEVICE),
	STATUS_DEF(STATUS_CANT_WAIT),
	STATUS_DEF(STATUS_PIPE_EMPTY),
	STATUS_DEF(STATUS_CANT_TERMINATE_SELF),
	STATUS_DEF(STATUS_OPLOCK_NOT_GRANTED),
	STATUS_DEF(STATUS_INVALID_PARAMETER_1),
	STATUS_DEF(STATUS_INVALID_PARAMETER_2),
	STATUS_DEF(STATUS_INVALID_PARAMETER_3),
	STATUS_DEF(STATUS_INVALID_PARAMETER_4),
	STATUS_DEF(STATUS_REDIRECTOR_NOT_STARTED)
};

LPCTSTR
StrMapNtStatus(
	_In_ NTSTATUS Status
)
{
	for (int i = 0; i < _countof(gStatus); i++)
	{
		if (gStatus[i].Status == Status) {
			return gStatus[i].lpszStatus;
		}
	}
	return NULL;
}


typedef struct _DWORD_DEF
{
	DWORD dwValue;
	LPCTSTR lpszDword;
}DWORD_DEF, * PDWORD_DEF;
#define DWORD_DEF(_x) {(DWORD)_x, TEXT(#_x)}

DWORD_DEF gSecurityInformation[] = {
	DWORD_DEF(OWNER_SECURITY_INFORMATION),
	DWORD_DEF(GROUP_SECURITY_INFORMATION),
	DWORD_DEF(DACL_SECURITY_INFORMATION),
	DWORD_DEF(SACL_SECURITY_INFORMATION),
	DWORD_DEF(LABEL_SECURITY_INFORMATION),
	DWORD_DEF(ATTRIBUTE_SECURITY_INFORMATION),
	DWORD_DEF(SCOPE_SECURITY_INFORMATION),
	DWORD_DEF(PROCESS_TRUST_LABEL_SECURITY_INFORMATION),
	DWORD_DEF(ACCESS_FILTER_SECURITY_INFORMATION),
	DWORD_DEF(BACKUP_SECURITY_INFORMATION),
	DWORD_DEF(PROTECTED_DACL_SECURITY_INFORMATION),
	DWORD_DEF(PROTECTED_SACL_SECURITY_INFORMATION),
	DWORD_DEF(UNPROTECTED_DACL_SECURITY_INFORMATION),
	DWORD_DEF(UNPROTECTED_SACL_SECURITY_INFORMATION)
};

CString
StrMapSecurityInformation(
	_In_ DWORD dwSecurityInformation
)
{
	CString strRet;
	for (int i = 0; i < _countof(gSecurityInformation); i++)
	{
		if (dwSecurityInformation & gSecurityInformation[i].dwValue) {
			strRet += gSecurityInformation[i].lpszDword;
			strRet += TEXT("|");
		}
	}

	strRet.TrimRight(TEXT("|"));
	return strRet;
}

DWORD_DEF gFileAccessMask[] = {
// 	DWORD_DEF(GENERIC_READ),
// 	DWORD_DEF(GENERIC_WRITE),
// 	DWORD_DEF(GENERIC_EXECUTE),
	DWORD_DEF(FILE_ALL_ACCESS),
	DWORD_DEF(FILE_GENERIC_READ),
	DWORD_DEF(FILE_GENERIC_WRITE),
	DWORD_DEF(FILE_GENERIC_EXECUTE),
	DWORD_DEF(FILE_READ_DATA),
	DWORD_DEF(FILE_WRITE_DATA),
	DWORD_DEF(FILE_APPEND_DATA),
	DWORD_DEF(FILE_READ_EA),
	DWORD_DEF(FILE_WRITE_EA),
	DWORD_DEF(FILE_EXECUTE),
	DWORD_DEF(FILE_DELETE_CHILD),
	DWORD_DEF(FILE_READ_ATTRIBUTES),
	DWORD_DEF(FILE_WRITE_ATTRIBUTES),
	DWORD_DEF(SYNCHRONIZE),
	DWORD_DEF(WRITE_DAC),
	DWORD_DEF(WRITE_OWNER),
	DWORD_DEF(DELETE),
	DWORD_DEF(READ_CONTROL),
	DWORD_DEF(ACCESS_SYSTEM_SECURITY),
};


CString
StrMapFileAccessMask(
	_In_ DWORD AccessMask
)
{
	CString strAccessMask;

	for (int i = 0; i < _countof(gFileAccessMask); i++)
	{
		DWORD dwValue = gFileAccessMask[i].dwValue;

		if (i < 4) {
			if (dwValue == AccessMask) {
				strAccessMask = gFileAccessMask[i].lpszDword;
				break;
			}
		}else{
			if (dwValue & AccessMask) {
				strAccessMask += gFileAccessMask[i].lpszDword;
				strAccessMask += TEXT('|');
			}
		}
	}
	strAccessMask.TrimRight(TEXT("|"));
	return strAccessMask;
}

DWORD_DEF gFileShareAccess[] = {
	DWORD_DEF(FILE_SHARE_READ),
	DWORD_DEF(FILE_SHARE_WRITE),
	DWORD_DEF(FILE_SHARE_DELETE),
};


CString
StrMapFileShareAccess(
	_In_ DWORD ShareAccess
)
{
	CString strAccessMask;

	for (int i = 0; i < _countof(gFileShareAccess); i++)
	{
		if (gFileShareAccess[i].dwValue & ShareAccess) {
			strAccessMask += gFileShareAccess[i].lpszDword;
			strAccessMask += TEXT('|');

			ShareAccess = (~gFileShareAccess[i].dwValue) & ShareAccess;
		}
	}
	strAccessMask.TrimRight(TEXT("|"));
	return strAccessMask;
}

DWORD_DEF gFileCreateDisposition[] = {
	DWORD_DEF(FILE_SUPERSEDE),
	DWORD_DEF(FILE_OPEN),
	DWORD_DEF(FILE_CREATE),
	DWORD_DEF(FILE_OPEN_IF),
	DWORD_DEF(FILE_OVERWRITE),
	DWORD_DEF(FILE_OVERWRITE_IF),
};

LPCTSTR
StrMapFileCreateDisposition(
	_In_ DWORD CreateDisposition
)
{
	for (int i = 0; i < _countof(gFileCreateDisposition); i++)
	{
		if (gFileCreateDisposition[i].dwValue == CreateDisposition) {
			return gFileCreateDisposition[i].lpszDword;
		}
	}
	return NULL;
}

DWORD_DEF gFileRetDisposition[] = {
	DWORD_DEF(FILE_SUPERSEDE),
	DWORD_DEF(FILE_OPENED),
	DWORD_DEF(FILE_CREATED),
	DWORD_DEF(FILE_OVERWRITTEN),
	DWORD_DEF(FILE_EXISTS),
	DWORD_DEF(FILE_DOES_NOT_EXIST),
};

LPCTSTR
StrMapFileRetDisposition(
	_In_ DWORD CreateDisposition
)
{
	for (int i = 0; i < _countof(gFileRetDisposition); i++)
	{
		if (gFileRetDisposition[i].dwValue == CreateDisposition) {
			return gFileRetDisposition[i].lpszDword;
		}
	}
	return NULL;
}

#define FILE_DISALLOW_EXCLUSIVE                 0x00020000
#define FILE_SESSION_AWARE                      0x00040000

DWORD_DEF gFileCreateOptions[] = {
	DWORD_DEF(FILE_DIRECTORY_FILE),
	DWORD_DEF(FILE_WRITE_THROUGH),
	DWORD_DEF(FILE_SEQUENTIAL_ONLY),
	DWORD_DEF(FILE_NO_INTERMEDIATE_BUFFERING),
	DWORD_DEF(FILE_SYNCHRONOUS_IO_ALERT),
	DWORD_DEF(FILE_SYNCHRONOUS_IO_NONALERT),
	DWORD_DEF(FILE_NON_DIRECTORY_FILE),
	DWORD_DEF(FILE_CREATE_TREE_CONNECTION),
	DWORD_DEF(FILE_COMPLETE_IF_OPLOCKED),
	DWORD_DEF(FILE_NO_EA_KNOWLEDGE),
	DWORD_DEF(FILE_OPEN_REMOTE_INSTANCE),
	DWORD_DEF(FILE_RANDOM_ACCESS),
	DWORD_DEF(FILE_DELETE_ON_CLOSE),
	DWORD_DEF(FILE_OPEN_BY_FILE_ID),
	DWORD_DEF(FILE_OPEN_FOR_BACKUP_INTENT),
	DWORD_DEF(FILE_NO_COMPRESSION),
	DWORD_DEF(FILE_OPEN_REQUIRING_OPLOCK),
	DWORD_DEF(FILE_DISALLOW_EXCLUSIVE),
	DWORD_DEF(FILE_SESSION_AWARE),
	DWORD_DEF(FILE_RESERVE_OPFILTER),
	DWORD_DEF(FILE_OPEN_REPARSE_POINT),
	DWORD_DEF(FILE_OPEN_NO_RECALL),
	DWORD_DEF(FILE_OPEN_FOR_FREE_SPACE_QUERY)
};

CString
StrMapFileCreateOptions(
	_In_ DWORD CreateOptions
)
{
	CString strRet;

	for (int i = 0; i < _countof(gFileCreateOptions); i++)
	{
		if (gFileCreateOptions[i].dwValue & CreateOptions) {
			strRet += gFileCreateOptions[i].lpszDword;
			strRet += TEXT('|');

			CreateOptions = (~gFileCreateOptions[i].dwValue) & CreateOptions;
		}
	}
	strRet.TrimRight(TEXT("|"));
	return strRet;
}

DWORD_DEF gFileAttributes[] = {
	DWORD_DEF(FILE_ATTRIBUTE_READONLY),
	DWORD_DEF(FILE_ATTRIBUTE_HIDDEN),
	DWORD_DEF(FILE_ATTRIBUTE_SYSTEM),
	DWORD_DEF(FILE_ATTRIBUTE_DIRECTORY),
	DWORD_DEF(FILE_ATTRIBUTE_ARCHIVE),
	DWORD_DEF(FILE_ATTRIBUTE_DEVICE),
	DWORD_DEF(FILE_ATTRIBUTE_NORMAL),
	DWORD_DEF(FILE_ATTRIBUTE_TEMPORARY),
	DWORD_DEF(FILE_ATTRIBUTE_SPARSE_FILE),
	DWORD_DEF(FILE_ATTRIBUTE_REPARSE_POINT),
	DWORD_DEF(FILE_ATTRIBUTE_COMPRESSED),
	DWORD_DEF(FILE_ATTRIBUTE_OFFLINE),
	DWORD_DEF(FILE_ATTRIBUTE_NOT_CONTENT_INDEXED),
	DWORD_DEF(FILE_ATTRIBUTE_ENCRYPTED),
	DWORD_DEF(FILE_ATTRIBUTE_INTEGRITY_STREAM)
};


CString
StrMapFileAttributes(
	_In_ DWORD FileAttributes
)
{
	CString strRet;

	for (int i = 0; i < _countof(gFileAttributes); i++)
	{
		if (gFileAttributes[i].dwValue & FileAttributes) {
			strRet += gFileAttributes[i].lpszDword;
			strRet += TEXT('|');

			FileAttributes = (~gFileAttributes[i].dwValue) & FileAttributes;
		}
	}
	strRet.TrimRight(TEXT("|"));
	return strRet;
}

typedef struct _OPT_CLASS_MAP
{
	int Class;
	LPCTSTR lpClassName;
}OPT_CLASS_MAP, *POPT_CLASS_MAP;

OPT_CLASS_MAP gClassMap[] = {
	{MONITOR_TYPE_POST, TEXT("Completion")},
	{MONITOR_TYPE_PROCESS, TEXT("Process")},
	{MONITOR_TYPE_REG, TEXT("Registery")},
	{MONITOR_TYPE_FILE, TEXT("File System")},
	{MONITOR_TYPE_PROFILING, TEXT("Profiling")},
};

LPCTSTR
StrMapClassEvent(
	_In_ int Class
)
{
	for (int i = 0; i < _countof(gClassMap); i++)
	{
		if (gClassMap[i].Class == Class) {
			return gClassMap[i].lpClassName;
		}
	}
	return NULL;
}

typedef struct _OPT_OPERATOR_MAP
{
	int Operator;
	LPCTSTR lpOptName;
}OPT_OPERATOR_MAP, * POPT_OPERATOR_MAP;

OPT_OPERATOR_MAP gProcOptMap[] = {
	{NOTIFY_PROCESS_INIT, TEXT("Process Init")},
	{NOTIFY_PROCESS_CREATE, TEXT("Process Create")},
	{NOTIFY_PROCESS_EXIT, TEXT("Process Exit")},
	{NOTIFY_THREAD_CREATE, TEXT("Thread Create")},
	{NOTIFY_THREAD_EXIT, TEXT("Thread Exit")},
	{NOTIFY_IMAGE_LOAD, TEXT("Load Image")},
	{NOTIFY_PROCESS_THREADPERFORMANCE, TEXT("Thread Profile")},
	{NOTIFY_PROCESS_START, TEXT("Process Start")},
	{NOTIFY_PROCESS_PERFORMANCE, TEXT("Process Statistics")},
	{NOTIFY_SYSTEM_PERFORMANCE, TEXT("System Statistics")},
};


OPT_OPERATOR_MAP gRegOptMap[] = {
	{NOTIFY_REG_OPENKEYEX, TEXT("RegOpenKey")},
	{NOTIFY_REG_CREATEKEYEX, TEXT("RegCreateKey")},
	{NOTIFY_REG_KEYHANDLECLOSE, TEXT("RegCloseKey")},
	{NOTIFY_REG_QUERYKEY, TEXT("RegQueryKey")},
	{NOTIFY_REG_SETVALUEKEY, TEXT("RegSetValueKey")},
	{NOTIFY_REG_QUERYVALUEKEY, TEXT("RegQueryValueKey")},
	{NOTIFY_REG_ENUMERATEVALUEKEY, TEXT("RegEnumValueKey")},
	{NOTIFY_REG_ENUMERATEKEY, TEXT("RegEnumKey")},
	{NOTIFY_REG_SETINFORMATIONKEY, TEXT("RegSetInfoKey")},
	{NOTIFY_REG_DELETEKEY, TEXT("RegDeletKey")},
	{NOTIFY_REG_DELETEVALUEKEY, TEXT("RegDeletValueKey")},
	{NOTIFY_REG_FLUSHKEY, TEXT("RegFlushKey")},
	{NOTIFY_REG_LOADKEY, TEXT("RegLoadKey")},
	{NOTIFY_REG_UNLOADKEY, TEXT("RegUnLoadKey")},
	{NOTIFY_REG_RENAMEKEY, TEXT("RegRenameKey")},
	{NOTIFY_REG_QUERYMULTIPLEVALUEKEY, TEXT("RegQueryMultipleValueKey")},
	{NOTIFY_REG_SETKEYSECURITY, TEXT("RegSetKeySecurity")},
	{NOTIFY_REG_QUERYKEYSECURITY, TEXT("RegQueryKeySecurity")},
};


#define FILE_SUB_OPT_DEF(_minjor, _fastioname, _show) {_minjor, _fastioname, _show}
#define FILE_SUB_OPT_DEF_END() {0, NULL, NULL}
typedef struct _FILE_OPT_SUB_DESC
{
	UCHAR Minjor;
	LPCTSTR lpszFastIoName;
	LPCTSTR lpszShowName;
}FILE_OPT_SUB_DESC, *PFILE_OPT_SUB_DESC;


#define IRP_MAP_DEF(_x, _show, _psub) {(UCHAR)_x, TEXT(#_x), _show, _psub}
typedef struct _OPT_FILE_OPERATOR_MAP
{
	UCHAR Major;
	LPCTSTR lpOptName;
	LPCTSTR lpszShowName;
	PFILE_OPT_SUB_DESC pSubDesc;
}OPT_FILE_OPERATOR_MAP, * POPT_FILE_OPERATOR_MAP;


FILE_OPT_SUB_DESC gFileSubMapLockControl[] = {
	FILE_SUB_OPT_DEF(1, TEXT("FASTIO_LOCK"), TEXT("LockFile")),
	FILE_SUB_OPT_DEF(2, TEXT("FASTIO_UNLOCK_SINGLE"), TEXT("UnlockFileSingle")),
	FILE_SUB_OPT_DEF(3, TEXT("FASTIO_UNLOCK_ALL"), TEXT("UnlockFileAll")),
	FILE_SUB_OPT_DEF(4, TEXT("FASTIO_UNLOCK_ALL_BY_KEY"), TEXT("UnlockFileByKey")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapRead[] = {
	FILE_SUB_OPT_DEF(0xFF, TEXT("FASTIO_READ"), TEXT("ReadFile")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapWrite[] = {
	FILE_SUB_OPT_DEF(0xFF, TEXT("FASTIO_WRITE"), TEXT("WriteFile")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapQueryInfo[] = {
	FILE_SUB_OPT_DEF(0x12, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryAllInformationFile")),
	FILE_SUB_OPT_DEF(0x23, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryAttributeTagFile")),
	FILE_SUB_OPT_DEF(0x04, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryBasicInformationFile")),
	FILE_SUB_OPT_DEF(0x1c, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryCompressionInformationFile")),
	FILE_SUB_OPT_DEF(0x07, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryEaInformationFile")),
	FILE_SUB_OPT_DEF(0x06, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryFileInternalInformationFile")),
	FILE_SUB_OPT_DEF(0x1f, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryMoveClusterInformationFile")),
	FILE_SUB_OPT_DEF(0x22, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryNetworkOpenInformationFile")),
	FILE_SUB_OPT_DEF(0x0e, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryPositionInformationFile")),
	FILE_SUB_OPT_DEF(0x05, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryStandardInformationFile")),
	FILE_SUB_OPT_DEF(0x16, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryStreamInformationFile")),
	FILE_SUB_OPT_DEF(0x09, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryNameInformationFile")),
	FILE_SUB_OPT_DEF(0x28, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryShortNameInformationFile")),
	FILE_SUB_OPT_DEF(0x30, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryNormalizedNameInformationFile")),
	FILE_SUB_OPT_DEF(0x31, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryNetworkPhysicalNameInformationFile")),
	FILE_SUB_OPT_DEF(0x25, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIdBothDirectory")),
	FILE_SUB_OPT_DEF(0x27, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryValidDataLength")),
	FILE_SUB_OPT_DEF(0x2b, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIoPiorityHint")),
	FILE_SUB_OPT_DEF(0x2e, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryLinks")),
	FILE_SUB_OPT_DEF(0x1d, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryId")),
	FILE_SUB_OPT_DEF(0x14, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryEndOfFile")),
	FILE_SUB_OPT_DEF(0x23, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryAttributeTag")),
	FILE_SUB_OPT_DEF(0x32, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIdGlobalTxDirectoryInformation")),
	FILE_SUB_OPT_DEF(0x33, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIsRemoteDeviceInformation")),
	FILE_SUB_OPT_DEF(0x34, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryAttributeCacheInformation")),
	FILE_SUB_OPT_DEF(0x35, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryNumaNodeInformation")),
	FILE_SUB_OPT_DEF(0x36, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryStandardLinkInformation")),
	FILE_SUB_OPT_DEF(0x37, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryRemoteProtocolInformation")),
	FILE_SUB_OPT_DEF(0x38, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryRenameInformationBypassAccessCheck")),
	FILE_SUB_OPT_DEF(0x39, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryLinkInformationBypassAccessCheck")),
	FILE_SUB_OPT_DEF(0x3a, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryVolumeNameInformation")),
	FILE_SUB_OPT_DEF(0x3b, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIdInformation")),
	FILE_SUB_OPT_DEF(0x3c, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIdExtdDirectoryInformation")),
	FILE_SUB_OPT_DEF(0x3e, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryHardLinkFullIdInformation")),
	FILE_SUB_OPT_DEF(0x3f, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryIdExtdBothDirectoryInformation")),
	FILE_SUB_OPT_DEF(0x43, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryDesiredStorageClassInformation")),
	FILE_SUB_OPT_DEF(0x44, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryStatInformation")),
	FILE_SUB_OPT_DEF(0x45, TEXT("FASTIO_QUERY_INFORMATION"), TEXT("QueryMemoryPartitionInformation")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapSetInfo[] = {
	FILE_SUB_OPT_DEF(0x13, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetAllocationInformationFile")),
	FILE_SUB_OPT_DEF(0x0d, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetDispositionInformationFile")),
	FILE_SUB_OPT_DEF(0x04, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetBasicInformationFile")),
	FILE_SUB_OPT_DEF(0x14, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetEndOfFileInformationFile")),
	FILE_SUB_OPT_DEF(0x0b, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetLinkInformationFile")),
	FILE_SUB_OPT_DEF(0x0e, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetPositionInformationFile")),
	FILE_SUB_OPT_DEF(0x0a, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetRenameInformationFile")),
	FILE_SUB_OPT_DEF(0x27, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetValidDataLengthInformationFile")),
	FILE_SUB_OPT_DEF(0x16, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetFileStreamInformation")),
	FILE_SUB_OPT_DEF(0x17, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetPipeInformation")),
	FILE_SUB_OPT_DEF(0x28, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetShortNameInformation")),
	FILE_SUB_OPT_DEF(0x40, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetDispositionInformationEx")),
	FILE_SUB_OPT_DEF(0x3d, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetReplaceCompletionInformation")),
	FILE_SUB_OPT_DEF(0x41, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetRenameInformationEx")),
	FILE_SUB_OPT_DEF(0x42, TEXT("FASTIO_SET_INFORMATION"), TEXT("SetRenameInformationExBypassAccessCheck")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapQueryVolumeInfo[] = {
	FILE_SUB_OPT_DEF(0x01, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryInformationVolume")),
	FILE_SUB_OPT_DEF(0x02, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryLabelInformationVolume")),
	FILE_SUB_OPT_DEF(0x03, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QuerySizeInformationVolume")),
	FILE_SUB_OPT_DEF(0x04, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryDeviceInformationVolume")),
	FILE_SUB_OPT_DEF(0x05, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryAttributeInformationVolume")),
	FILE_SUB_OPT_DEF(0x06, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryControlInformationVolume")),
	FILE_SUB_OPT_DEF(0x07, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryFullSizeInformationVolume")),
	FILE_SUB_OPT_DEF(0x08, TEXT("FASTIO_QUERY_VOLUME_INFORMATION"), TEXT("QueryObjectIdInformationVolume")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapDirControl[] = {
	FILE_SUB_OPT_DEF(0x01, TEXT("FASTIO_DIRECTORY_CONTROL"), TEXT("QueryDirectory")),
	FILE_SUB_OPT_DEF(0x02, TEXT("FASTIO_DIRECTORY_CONTROL"), TEXT("NotifyChangeDirectory")),
	FILE_SUB_OPT_DEF_END(),
};

FILE_OPT_SUB_DESC gFileSubMapPnp[] = {
	FILE_SUB_OPT_DEF(0x00, TEXT("IRP_MJ_PNP"), TEXT("StartDevice")),
	FILE_SUB_OPT_DEF(0x01, TEXT("IRP_MJ_PNP"), TEXT("QueryRemoveDevice")),
	FILE_SUB_OPT_DEF(0x02, TEXT("IRP_MJ_PNP"), TEXT("RemoveDevice")),
	FILE_SUB_OPT_DEF(0x03, TEXT("IRP_MJ_PNP"), TEXT("CancelRemoveDevice")),
	FILE_SUB_OPT_DEF(0x04, TEXT("IRP_MJ_PNP"), TEXT("StopDevice")),
	FILE_SUB_OPT_DEF(0x05, TEXT("IRP_MJ_PNP"), TEXT("QueryStopDevice")),
	FILE_SUB_OPT_DEF(0x06, TEXT("IRP_MJ_PNP"), TEXT("CancelStopDevice")),
	FILE_SUB_OPT_DEF(0x07, TEXT("IRP_MJ_PNP"), TEXT("QueryDeviceRelations")),
	FILE_SUB_OPT_DEF(0x08, TEXT("IRP_MJ_PNP"), TEXT("QueryInterface")),
	FILE_SUB_OPT_DEF(0x09, TEXT("IRP_MJ_PNP"), TEXT("QueryCapabilities")),
	FILE_SUB_OPT_DEF(0x0a, TEXT("IRP_MJ_PNP"), TEXT("QueryResources")),
	FILE_SUB_OPT_DEF(0x0b, TEXT("IRP_MJ_PNP"), TEXT("QueryResourceRequirements")),
	FILE_SUB_OPT_DEF(0x0c, TEXT("IRP_MJ_PNP"), TEXT("QueryDeviceText")),
	FILE_SUB_OPT_DEF(0x0d, TEXT("IRP_MJ_PNP"), TEXT("FilterResourceRequirements")),
	FILE_SUB_OPT_DEF(0x0f, TEXT("IRP_MJ_PNP"), TEXT("ReadConfig")),
	FILE_SUB_OPT_DEF(0x10, TEXT("IRP_MJ_PNP"), TEXT("WriteConfig")),
	FILE_SUB_OPT_DEF(0x11, TEXT("IRP_MJ_PNP"), TEXT("Eject")),
	FILE_SUB_OPT_DEF(0x12, TEXT("IRP_MJ_PNP"), TEXT("SetLock")),
	FILE_SUB_OPT_DEF(0x13, TEXT("IRP_MJ_PNP"), TEXT("QueryId")),
	FILE_SUB_OPT_DEF(0x14, TEXT("IRP_MJ_PNP"), TEXT("QueryPnpDeviceState")),
	FILE_SUB_OPT_DEF(0x15, TEXT("IRP_MJ_PNP"), TEXT("QueryBusInformation")),
	FILE_SUB_OPT_DEF(0x16, TEXT("IRP_MJ_PNP"), TEXT("DeviceUsageNotification")),
	FILE_SUB_OPT_DEF(0x17, TEXT("IRP_MJ_PNP"), TEXT("SurpriseRemoval")),
	FILE_SUB_OPT_DEF(0x18, TEXT("IRP_MJ_PNP"), TEXT("QueryLegacyBusInformation")),
	FILE_SUB_OPT_DEF_END(),
};


OPT_FILE_OPERATOR_MAP gFileOptMap[] = {
	IRP_MAP_DEF(IRP_MJ_CREATE, TEXT("CreateFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_CREATE_NAMED_PIPE, TEXT("CreatePipe"), NULL),
	IRP_MAP_DEF(IRP_MJ_CLOSE, TEXT("IRP_MJ_CLOSE"), NULL),
	IRP_MAP_DEF(IRP_MJ_READ, TEXT("ReadFile"), gFileSubMapRead),
	IRP_MAP_DEF(IRP_MJ_WRITE, TEXT("WriteFile"), gFileSubMapWrite),
	IRP_MAP_DEF(IRP_MJ_QUERY_INFORMATION, TEXT("QueryInformationFile"), gFileSubMapQueryInfo),
	IRP_MAP_DEF(IRP_MJ_SET_INFORMATION, TEXT("SetInformationFile"), gFileSubMapSetInfo),
	IRP_MAP_DEF(IRP_MJ_QUERY_EA, TEXT("QueryEAFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_SET_EA, TEXT("SetEAFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_FLUSH_BUFFERS, TEXT("FlushBuffersFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_QUERY_VOLUME_INFORMATION, TEXT("QueryVolumeInformation"), gFileSubMapQueryVolumeInfo),
	IRP_MAP_DEF(IRP_MJ_SET_VOLUME_INFORMATION, TEXT("SetVolumeInformation"), NULL),
	IRP_MAP_DEF(IRP_MJ_DIRECTORY_CONTROL, TEXT("DirectoryControl"), gFileSubMapDirControl),
	IRP_MAP_DEF(IRP_MJ_FILE_SYSTEM_CONTROL, TEXT("FileSystemControl"), NULL),
	IRP_MAP_DEF(IRP_MJ_DEVICE_CONTROL, TEXT("DeviceIoControl"), NULL),
	IRP_MAP_DEF(IRP_MJ_INTERNAL_DEVICE_CONTROL, TEXT("InternalDeviceIoControl"), NULL),
	IRP_MAP_DEF(IRP_MJ_SHUTDOWN, TEXT("Shutdown"), NULL),
	IRP_MAP_DEF(IRP_MJ_LOCK_CONTROL, TEXT("LockUnlockFile"), gFileSubMapLockControl),
	IRP_MAP_DEF(IRP_MJ_CLEANUP, TEXT("CloseFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_CREATE_MAILSLOT, TEXT("CreateMailSlot"), NULL),
	IRP_MAP_DEF(IRP_MJ_QUERY_SECURITY, TEXT("QuerySecurityFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_SET_SECURITY, TEXT("SetSecurityFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_POWER, TEXT("Power"), NULL),
	IRP_MAP_DEF(IRP_MJ_SYSTEM_CONTROL, TEXT("SystemControl"), NULL),
	IRP_MAP_DEF(IRP_MJ_DEVICE_CHANGE, TEXT("DeviceChange"), NULL),
	IRP_MAP_DEF(IRP_MJ_QUERY_QUOTA, TEXT("QueryFileQuota"), NULL),
	IRP_MAP_DEF(IRP_MJ_SET_QUOTA, TEXT("SetFileQuota"), NULL),
	IRP_MAP_DEF(IRP_MJ_PNP, TEXT("PlugAndPlay"), gFileSubMapPnp),

	IRP_MAP_DEF(IRP_MJ_ACQUIRE_FOR_SECTION_SYNCHRONIZATION, TEXT("CreateFileMapping"), NULL),
	IRP_MAP_DEF(IRP_MJ_RELEASE_FOR_SECTION_SYNCHRONIZATION, TEXT("IRP_MJ_RELEASE_FOR_SECTION_SYNCHRONIZATION"), NULL),
	IRP_MAP_DEF(IRP_MJ_ACQUIRE_FOR_MOD_WRITE, TEXT("IRP_MJ_ACQUIRE_FOR_MOD_WRITE"), NULL),
	IRP_MAP_DEF(IRP_MJ_RELEASE_FOR_MOD_WRITE, TEXT("IRP_MJ_RELEASE_FOR_MOD_WRITE"), NULL),
	IRP_MAP_DEF(IRP_MJ_ACQUIRE_FOR_CC_FLUSH, TEXT("IRP_MJ_ACQUIRE_FOR_CC_FLUSH"), NULL),
	IRP_MAP_DEF(IRP_MJ_RELEASE_FOR_CC_FLUSH, TEXT("IRP_MJ_RELEASE_FOR_CC_FLUSH"), NULL),
	IRP_MAP_DEF(IRP_MJ_QUERY_OPEN, TEXT("IRP_MJ_QUERY_OPEN"), NULL),

	IRP_MAP_DEF(IRP_MJ_FAST_IO_CHECK_IF_POSSIBLE, TEXT("FASTIO_CHECK_IF_POSSIBLE"), NULL),
	IRP_MAP_DEF(IRP_MJ_NETWORK_QUERY_OPEN, TEXT("QueryOpen"), NULL),
	IRP_MAP_DEF(IRP_MJ_MDL_READ, TEXT("ReadFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_MDL_READ_COMPLETE, TEXT("FASTIO_MDL_READ_COMPLETE"), NULL),

	IRP_MAP_DEF(IRP_MJ_PREPARE_MDL_WRITE, TEXT("WriteFile"), NULL),
	IRP_MAP_DEF(IRP_MJ_MDL_WRITE_COMPLETE, TEXT("FASTIO_MDL_WRITE_COMPLETE"), NULL),
	IRP_MAP_DEF(IRP_MJ_VOLUME_MOUNT, TEXT("VolumeMount"), NULL),
	IRP_MAP_DEF(IRP_MJ_VOLUME_DISMOUNT, TEXT("VolumeDismount"), NULL),
};


LPCTSTR
StrMapOperation(
	_In_ PLOG_ENTRY pEntry
)
{
	if (!pEntry){
		return TEXT("Invalid Entry");
	}

	USHORT Class = pEntry->MonitorType;
	USHORT Operator = pEntry->NotifyType;

	if (Class == MONITOR_TYPE_PROCESS){
		for (int i = 0; i < _countof(gProcOptMap); i++)
		{
			if (gProcOptMap[i].Operator == Operator) {
				return gProcOptMap[i].lpOptName;
			}
		}
		return NULL;
	}else if (Class == MONITOR_TYPE_FILE){
		
		PLOG_FILE_OPT pFileOPt = TO_EVENT_DATA(PLOG_FILE_OPT, pEntry);
		UCHAR Major = (UCHAR)Operator - 20;
		UCHAR Minjor = pFileOPt->MinorFunction;
		LPCTSTR lpszRet = NULL;

		for (int i = 0; i < _countof(gFileOptMap); i++)
		{
			if (gFileOptMap[i].Major == Major){
				if (gFileOptMap[i].pSubDesc) {

					PFILE_OPT_SUB_DESC pSubDesc = gFileOptMap[i].pSubDesc;
					for (int j = 0; ; j++)
					{
						if (!pSubDesc[j].lpszFastIoName) {
							break;
						}
						if (pSubDesc[j].Minjor == 0xff ||
							pSubDesc[j].Minjor == Minjor) {
							if (pSubDesc[j].lpszShowName) {
								lpszRet = pSubDesc[j].lpszShowName;
							}

							break;
						}
					}

				}else{
					lpszRet = gFileOptMap[i].lpszShowName;
				}

				break;
			}
		}

		if (!lpszRet){
			lpszRet = TEXT("Unknown");
		}

		return lpszRet;

	}else if (Class == MONITOR_TYPE_REG){
		for (int i = 0; i < _countof(gRegOptMap); i++)
		{
			if (gRegOptMap[i].Operator == Operator) {
				return gRegOptMap[i].lpOptName;
			}
		}
		return NULL;
	}

	return NULL;
}


LPCTSTR
StrMapIntegrityLevel(
	_In_ DWORD dwIntegrityLevel
)
{
	switch (dwIntegrityLevel)
	{
	case SECURITY_MANDATORY_LOW_RID:
		return TEXT("Low");
	case SECURITY_MANDATORY_MEDIUM_RID:
		return TEXT("Medium");
	case SECURITY_MANDATORY_MEDIUM_PLUS_RID:
		return TEXT("Medium+");
	case SECURITY_MANDATORY_UNTRUSTED_RID:
		return TEXT("Untrusted");
	case SECURITY_MANDATORY_HIGH_RID:
		return TEXT("High");
	case SECURITY_MANDATORY_SYSTEM_RID:
		return TEXT("System");
	case SECURITY_MANDATORY_PROTECTED_PROCESS_RID:
		return TEXT("Protected");
	default:
		return TEXT("Invalid");
	}
}

CString
StrMapUserNameFromSid(
	_In_ PSID pSid
)
{

	CString strUserName;
	DWORD dwNameLength = 0, dwDomainNameLength = 0;
	SID_NAME_USE Use;
	BOOL bRet = FALSE;
	LPTSTR pName = NULL, pDomainName = NULL;
	LPTSTR pStrSid = NULL;

	if (!ConvertSidToStringSid(pSid, &pStrSid)) {
		return strUserName;
	}

	//
	// Is local user SID?
	//

	bRet = LookupAccountSid(NULL, pSid, NULL, &dwNameLength, NULL, &dwDomainNameLength, &Use);
	if (!bRet && GetLastError() == ERROR_INSUFFICIENT_BUFFER) {

		//
		// Allocate buffer for Names
		//

		if (dwNameLength) {
			pName = (LPTSTR)LocalAlloc(0, dwNameLength * sizeof(TCHAR));
		}

		if (dwDomainNameLength) {
			pDomainName = (LPTSTR)LocalAlloc(0, dwDomainNameLength * sizeof(TCHAR));
		}

		//
		// Call the function again
		//

		bRet = LookupAccountSid(NULL, pSid, pName, &dwNameLength, pDomainName, &dwDomainNameLength, &Use);
		if (bRet) {

			//
			// Show SID first
			//

			if (dwDomainNameLength) {
				strUserName.Format(TEXT("%s\\%s"), pDomainName, pName);
			}else{
				strUserName = pName;
			}
		}
	}else{

		//
		// Can not convert to local user name. just show SID string
		//

		strUserName = pStrSid;
	}

	if (pStrSid) {
		LocalFree(pStrSid);
	}

	if (pName) {
		LocalFree(pName);
	}

	if (pDomainName) {
		LocalFree(pDomainName);
	}

	return strUserName;
}